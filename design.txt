High-level Goals:
- Enforce rules for the game of Weiss Schwarz
- Allow arbitrary cards to be executed within the context of the game
- Inform API consumer of possible actions allowed to be taken
- Prevent API consumer from attempting impossible actions
- Provide events and game state to API consumer
- Reasonable performance to the point that any IO is more impactful than the engine itself
- Don't leak information about possibly hidden gamestate due to API (example, always pausing at a location a player could play a card even if they have no cards to play)
- Requirements doc here: https://heartofthecards.com/ws/manual.html
High-level Maybes:
- Allow arbitrary pausing of game state to be resumed later from a raw data
- Cycle analysis to prevent infinite loops
- Provide support for arbitrary replacement events
High-level Non-goals:
- Ultra high performance 
- Render the game
- Handle card games other than Weiss Schwarz
- Provide turing-complete language for execution cards

Design:

Biggest block of execution is one player's turn (NOT one pair of turns)
API will allow for standalone rules engine, or integrated rule engine
Engine will not conduct IO directly, instead it will provide details of what information it needs
Engine will stall while waiting for IO to be conducted
Cards will include bits of code or bytecode to be executed as card effects
Internally, engine will provide the ability to trigger events and have card effects respond to them

Structure

struct GameState {
    players: [PlayerData; 2],
    active_player: usize,
    current_phase: Phase,
    turn_number: usize,
}

enum Phase {
    Untap,
    Draw,
    Clock,
    ...
}

struct PlayerData {
    deck: Zone,
    hand: Zone,
    level: Zone,
    ...
}

struct Zone {
    content: Vec<CardId>,
}



struct GameData {
  cards: Vec<CardData>,
}

struct CardData {
    base_stats: CardStats,
    abilities: Vec<CardAbilities>,
}

struct CardAbilities {
    // this contains executable data
    ???
}

struct CardStats {
    power: i32,
    level: i32,
    ...
}

trait EngineInterface {
    ...
}


buff handling Design
maintain list of all buffs currently affecting the gamestate, with timestamps

whenever asking to evaluate a cards stat, work backward from the buff list to create a list of buffs that affect it directly or indirectly,
generate the ordering of calculations
assemble all the relevant base stats and input them into the resulting formula, and get the result

include dependencies on owners and positioning

or

handle a list of all buffs

sample Layer list and ordering:
1) Granted Abilities
2) Name
3) Traits
4) Color
5) Cost
6) Level
7) Soul
8) Power
9) Power that depends on other characters Power

decide arbitrary field execution order at the expense of correctness
render each layer one by one on the entire gamestate

invalidate the cache as often as needed
    - when the list of buffs changes
    - when the positions of cards on the stage change
    - when cards change zones 
    - create a list of invalidation metrics that the buffs should keep track of to tell the cache when to invalidate?


iterate through every cards abilities?
have ability triggers require the zone they need to be in as a required trigger condition