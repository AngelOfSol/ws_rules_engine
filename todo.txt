[x] setup basic gamestate
[x] setup basic gamedata
[x] create start and end turns
[x] display start and end turn events
[x] create draw phase
    [x] initialize decks
    [x] create phase
    [x] log phase change event
    [x] add card from top of deck to top of hand
[x] display draw event
[x] create clock phase
    [x] log phase change
    [x] ask turn_player what card to clock (or none)
    [x] move chosen card top of the clock
    [x] log clocked card
    [x] draw 2 cards
[x] move state changing functions to the PlayerState, so we can unit test them and leave the rules engine to handling IO
    [x] draw_card
    [x] clock draw 2
[x] move clock_action to seperate function so it's more testable
[x] pass the drawn CardID to the io function
[x] change api to take index into options list, rather than taking card_id
[x] add choice context
[x] implement hand limit at end of turn
    [x] add the hand limit to each player
    [x] modify the end phase to check if they're over the hand limit
    [x] ask the user, what cards to discard over the handlimit
    [x] put those cards into the waiting room
        [x] make waiting room
        [x] take cards out of hand
        [x] put them on top of waiting room
[x] handle leveling
    [x] create level zone
    [x] create interrupt processing for leveling
    [x] ask choice to choose what card to level
    [x] move 1 card to top of level zone
    [x] move 6 cards to the bottom of the level zone
    [x] move card to level zone
    [x] log leveling event
[] add documentation comments to everything
[] make sure clock phase can handle zero cards in hand
    [] clock phase should ask for a Some(card) or None, and provide no options
[] change active_player to PlayerID for more typesafety
[] handle refreshing
    [] create interrupt processing for refreshing
    [] make sure that player gets to choose between refresh and level, when they both happen at the same time
    [] move waiting room to deck
    [] add a point to the refresh point
    [] handle the refresh point at the correct timing
[] handle losing
    [] implement loss checking
        [] level 4
        [] empty waiting room, empty library
[] end the game when game is over
[] add playing characters
    [] add data for characters to game_data
    [] create references to those cards
    [] default card base = 0/0 3000 yellow character with no traits
    [] add level restrictions
        [] base level
    [] add color restrictions
        [] base color

[] add gamestate rendering
    [] instead of sending our internal rules engine struct over to the user
    [] send a rendered version that puts info directly in the zones and slots instead
[] start adding integration tests
    [x] integ IO helper
    [x] logs every event and who they happened to
    [x] logs every choice to be made, by who, and what answer should be given in that context
    [x] provide structure for logged events that can be tested versus while the game is run


